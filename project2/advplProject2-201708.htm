<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html><head>







        
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
        
  <meta name="Author" content="John coffey">
        
  <meta name="GENERATOR" content="Mozilla/4.61 [en] (WinNT; U) [Netscape]"><title>Advanced Programming Languages Projects</title></head><body>
    
<center><b><font size="+1">Advanced Programming languages</font></b> <br>
 <b><font size="+1">Programming Project 2<br>
</font></b></center><br>
<b>Project #2: A low level Code Generator.</b> <br>


<p>This project involves building the code 
generator for the compiler. 
Also, extend your grammar to include simple read and write capabilities and variable declarations. This
part will entail possibly using an intermediate representation such as
a syntax tree and the symboltable to make static semantic checks and
to generate low-level code. The static semantic checks should be to
ensure that a variable has been declared before it is used and to
ensure there are no redefinition errors.<br>
</p>
<p>You will extend the parser from project 1 to generate a register-based intermediate representation similar to the following:</p>
Given a source code program such as this:<br>
<br>
<span style="font-family: Courier New,Courier,monospace;">PROGRAM gcd;</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">VAR i, j: Integer;</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">BEGIN</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">&nbsp; read (i);</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">&nbsp; read (j);</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">&nbsp; WHILE i &lt;&gt; j DO</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; if i &gt; j THEN</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = i &#8211; j;</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp; ELSE</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j = j &#8211; i;</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">&nbsp; ENDWHILE</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">&nbsp; write (i);</span><br style="font-family: Courier New,Courier,monospace;">
<span style="font-family: Courier New,Courier,monospace;">END.</span><br>
<br>
<br>
Your code generator will produce output in a text file similar to this:<br>
<br>
<span style="font-family: &quot;Courier New&quot;;">-- generated by symbol table traversal<br>
.data&nbsp;&nbsp; -- begin static data section<br>
.word i<br>
.word j<br>
.text &#8211; text of the code itself<br>
main:<br>
&nbsp;&nbsp;&nbsp; a1 := &amp;input<br>
&nbsp;&nbsp;&nbsp; call readint<br>
&nbsp;&nbsp;&nbsp; i := rv<br>
&nbsp;&nbsp;&nbsp; a1 := &amp;input<br>
&nbsp;&nbsp;&nbsp; call readint<br>
&nbsp;&nbsp;&nbsp; j := rv<br>
&nbsp;&nbsp;&nbsp; goto L1<br>
L2: r1 := i&nbsp;&nbsp;&nbsp; -- body of while loop<br>
&nbsp;&nbsp;&nbsp; r2 := j<br>
&nbsp;&nbsp;&nbsp; r1 := r1 &gt; r2<br>
&nbsp;&nbsp;&nbsp; if r1 goto L3<br>
&nbsp;&nbsp;&nbsp; r1 := j&nbsp;&nbsp;&nbsp; -- else part of loop<br>
&nbsp;&nbsp;&nbsp; r2 := i<br>
&nbsp;&nbsp;&nbsp; r1 := r1 &#8211; r2<br>
&nbsp;&nbsp;&nbsp; j := r1<br>
&nbsp;&nbsp;&nbsp; goto L4<br>
L3: r1 := i<br>
&nbsp;&nbsp;&nbsp; r2 := j<br>
&nbsp;&nbsp;&nbsp; r1 := r1 &#8211; r2<br>
&nbsp;&nbsp;&nbsp; i := r1<br>
L4:<br>
L1: r1 := i<br>
&nbsp;&nbsp;&nbsp; r2 := j<br>
&nbsp;&nbsp;&nbsp; r1 := r1 &lt;&gt; r2&nbsp; -- while loop test<br>
&nbsp;&nbsp;&nbsp; if r1 goto L2<br>
&nbsp;&nbsp;&nbsp; a1 := &amp;output<br>
&nbsp;&nbsp;&nbsp; r1 := i<br>
&nbsp;&nbsp;&nbsp; a2 := r1<br>
&nbsp;&nbsp;&nbsp; call writeint<br>
&nbsp;&nbsp;&nbsp; a1 := &amp;output<br>
&nbsp;&nbsp;&nbsp; call writeln<br>
&nbsp;&nbsp;&nbsp; goto exit&nbsp;&nbsp;&nbsp;&nbsp; -- return to OS</span><br>
<p></p>
<b>Program Input and Output<br>
</b>There will be no user interaction with the program. The program
will be invoked 8 times from a shell script as demonstrated in class
(see below in deliverables). Input will be via commandline parameter of
the file to be parsed, specified in the script file. Output will be 4
files containing the intermediate representation code for the four
legal programs. Additionally output will go to
the console reporting either a successful parse or a syntax error and
the line on which the error was detected.<br>
<b><br>
Other Policies</b> <br>

 All projects will be individual.
<p><b>Deliverables:</b><span style="font-weight: bold;"><br>
</span></p>

You will submit all your work bundled up in WinZip (on PC) to the DropBox
 for the course on <tt>elearning.uwf.edu. </tt>Please
make your name is very
clear on the zipfile you upload and inside all files contained within
the zipfile. Place all your files in a single directory named <span style="font-family: monospace;">&lt;firstInitial&gt;&lt;lastname&gt;-p&lt;projNumber&gt;.</span> For instance, my&nbsp; submission would be<span style="font-family: monospace;"> jcoffey-p2. </span>zip that folder into a .zip file and upload it to the appropriate dropbox.<br>
<br>
So, submit a single zip file containing a single folder, with the following items in the folder:<br>
 
 
 
<ul>
   <li>An updated version of the grammar of your language. </li>
   <li>Source code for the entire program</li>
  <li>A User's manual regarding exactly what this submission does and how to 
	run it</li>

   <li>Design documents reflecting the complete program.</li>
	<li>Four examples each of both legal and illegal programs. The programs 
	should be of increasing complexity, with the last legal and illegal program being the <span style="font-weight: bold; font-style: italic;">gcd program </span>from above.</li>
	<li>A
script that attempts to compile and run all legal and illegal programs
as a batch, producing separate compiled files or appropriate error
messages.</li>
   
	<li>A makefile to build your project.<br>
</li>
 
</ul>
 
<p> </p>
 
<hr width="100%">  
<p><br>
</p><br>
</body></html>